"use strict";
Object.prototype.readInt8 = function (offset) {
    var buffer = this;
    var a = buffer[offset];
    if ((a & 0x80) > 0) {
        return a - 0x100;
    }
    return a;
};
Object.prototype.readUInt8 = function (offset) {
    var buffer = this;
    return buffer[offset];
};
Object.prototype.readInt16BE = function (offset) {
    var buffer = this;
    var a = (buffer[offset] << 8) | buffer[offset + 1];
    if ((a & 0x8000) > 0) {
        return a - 0x10000;
    }
    return a;
};
Object.prototype.readUInt16BE = function (offset) {
    var buffer = this;
    return (buffer[offset] << 8) | buffer[offset + 1];
};
Object.prototype.readInt32BE = function (offset) {
    var buffer = this;
    var a = ((buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3]) >>> 0;
    if ((a & 0x80000000) > 0) {
        return a - 0x10000000;
    }
    return a;
};
Object.prototype.readUInt32BE = function (offset) {
    var buffer = this;
    return ((buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3]) >>> 0;
};
Object.prototype.readFloatBE = function (offset) {
    var buffer = this;
    var value = ((buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3]) >>> 0;
    return new Float32Array(new Uint32Array([value]).buffer)[0];
};
if (typeof module !== 'undefined') {
    module.exports = codec;
}
if (typeof process !== 'undefined' && process.env['NODE_ENV'] === 'test') {
    global.codec = codec;
}
var codec;
(function (codec) {
    var PartialDecodingReason;
    (function (PartialDecodingReason) {
        PartialDecodingReason[PartialDecodingReason["NONE"] = 0] = "NONE";
        PartialDecodingReason[PartialDecodingReason["MISSING_NETWORK"] = 1] = "MISSING_NETWORK";
        PartialDecodingReason[PartialDecodingReason["MISSING_CONFIGURATION"] = 2] = "MISSING_CONFIGURATION";
    })(PartialDecodingReason = codec.PartialDecodingReason || (codec.PartialDecodingReason = {}));
})(codec || (codec = {}));
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var codec;
(function (codec) {
    var ContentImpl = (function () {
        function ContentImpl(type) {
            if (type === void 0) { type = 'Unknown'; }
            this.type = type;
            this.partialDecoding = codec.PartialDecodingReason.NONE;
        }
        ContentImpl.merge = function () {
            var contents = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                contents[_i] = arguments[_i];
            }
            if (!contents || contents.length === 0) {
                return null;
            }
            return Object.assign.apply(Object, __spreadArray([new ContentImpl(contents[0].type)], contents, false));
        };
        ContentImpl.prototype.merge = function () {
            var contents = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                contents[_i] = arguments[_i];
            }
            return ContentImpl.merge.apply(ContentImpl, __spreadArray([this], contents, false));
        };
        return ContentImpl;
    }());
    codec.ContentImpl = ContentImpl;
})(codec || (codec = {}));
var codec;
(function (codec) {
    var PlateformCommonUtils = (function () {
        function PlateformCommonUtils() {
        }
        PlateformCommonUtils.getProductModeText = function (value) {
            switch (value) {
                case 0:
                    return 'PARK';
                case 1:
                    return 'PRODUCTION';
                case 2:
                    return 'TEST';
                case 3:
                    return 'DEAD';
                default:
                    return '';
            }
        };
        return PlateformCommonUtils;
    }());
    codec.PlateformCommonUtils = PlateformCommonUtils;
})(codec || (codec = {}));
var codec;
(function (codec) {
    var GenericStatusByteParser = (function () {
        function GenericStatusByteParser() {
            this.deviceType = 'any';
            this.frameCode = 0;
        }
        GenericStatusByteParser.prototype.parseFrame = function (payload, configuration) {
            var statusContent = {};
            statusContent['frameCounter'] = (payload[1] & 0xe0) >> 5;
            statusContent['hardwareError'] = false;
            statusContent['lowBattery'] = Boolean(payload[1] & 0x02);
            statusContent['configurationDone'] = Boolean(payload[1] & 0x01);
            return statusContent;
        };
        return GenericStatusByteParser;
    }());
    codec.GenericStatusByteParser = GenericStatusByteParser;
})(codec || (codec = {}));
var codec;
(function (codec) {
    var Generic0x20Parser = (function () {
        function Generic0x20Parser() {
            this.deviceType = 'any';
            this.frameCode = 0x20;
        }
        Generic0x20Parser.prototype.parseFrame = function (payload, configuration, network, deviceType) {
            var appContent = { type: '0x20 Configuration' };
            switch (payload.length) {
                case 4:
                    appContent['loraAdr'] = Boolean(payload[2] & 0x01);
                    appContent['loraProvisioningMode'] = payload[3] === 0 ? 'ABP' : 'OTAA';
                    if (deviceType !== 'analog' && deviceType !== 'drycontacts' && deviceType !== 'pulse' && deviceType !== 'temp') {
                        appContent['loraDutycyle'] = payload[2] & 0x04 ? 'activated' : 'deactivated';
                        appContent['loraClassMode'] = payload[2] & 0x20 ? 'CLASS C' : 'CLASS A';
                    }
                    break;
                case 3:
                case 5:
                    appContent['sigfoxRetry'] = payload[2] & 0x03;
                    if (payload.length === 5) {
                        appContent['sigfoxDownlinkPeriod'] = { unit: 'm', value: payload.readInt16BE(3) };
                    }
                    break;
                default:
                    appContent.partialDecoding = codec.PartialDecodingReason.MISSING_NETWORK;
                    break;
            }
            return appContent;
        };
        return Generic0x20Parser;
    }());
    codec.Generic0x20Parser = Generic0x20Parser;
})(codec || (codec = {}));
var codec;
(function (codec) {
    var Temp0x10Parser = (function () {
        function Temp0x10Parser() {
            this.deviceType = 'temp';
            this.frameCode = 0x10;
        }
        Temp0x10Parser.prototype.parseFrame = function (payload, configuration, network) {
            var appContent = { type: '0x10 Temperature configuration' };
            var temp1 = { name: 'probe 1' };
            var temp2 = { name: 'probe 2' };
            if (payload[8] === 2) {
                appContent['transmissionPeriodKeepAlive'] = { unit: 's', value: payload[2] * 20 };
                appContent['transmissionPeriodData'] = { unit: 's', value: payload[3] * 20 };
                appContent['samplingPeriod'] = { unit: 's', value: payload[10] * 10 };
            }
            else {
                appContent['transmissionPeriodKeepAlive'] = { unit: 'm', value: payload[2] * 10 };
                appContent['transmissionPeriodData'] = { unit: 'm', value: payload[3] * 10 };
                appContent['samplingPeriod'] = { unit: 'm', value: payload[10] };
            }
            temp1['id'] = (payload[4] & 0xf0) >> 4;
            temp1['threshold'] = this.getThresholdTriggeringText(payload[5] & 0x03);
            temp1['state'] = payload[9] & 0x01 ? 'activated' : 'deactivated';
            temp2['id'] = (payload[6] & 0xf0) >> 4;
            temp2['threshold'] = this.getThresholdTriggeringText(payload[7] & 0x03);
            temp2['state'] = payload[9] & 0x02 ? 'activated' : 'deactivated';
            appContent['probes'] = [temp1, temp2];
            appContent['productMode'] = codec.PlateformCommonUtils.getProductModeText(payload[8]);
            return appContent;
        };
        Temp0x10Parser.prototype.getThresholdTriggeringText = function (value) {
            switch (value) {
                case 0:
                    return 'none';
                case 1:
                    return 'low';
                case 2:
                    return 'high';
                case 3:
                    return 'both';
                default:
                    return '';
            }
        };
        return Temp0x10Parser;
    }());
    codec.Temp0x10Parser = Temp0x10Parser;
})(codec || (codec = {}));
var codec;
(function (codec) {
    var Temp0x11Parser = (function () {
        function Temp0x11Parser() {
            this.deviceType = 'temp';
            this.frameCode = 0x11;
        }
        Temp0x11Parser.prototype.parseFrame = function (payload, configuration, network) {
            var appContent = { type: '0x11 Temperature configuration' };
            appContent['threshold'] = {
                name: 'probe 1',
                unit: '\u00B0' + 'C',
                high: {
                    value: payload.readInt16BE(2) / 10,
                    hysteresis: payload[4] / 10,
                },
                low: {
                    value: payload.readInt16BE(5) / 10,
                    hysteresis: payload[7] / 10,
                },
            };
            appContent['superSamplingFactor'] = payload[8];
            return appContent;
        };
        return Temp0x11Parser;
    }());
    codec.Temp0x11Parser = Temp0x11Parser;
})(codec || (codec = {}));
var codec;
(function (codec) {
    var Temp0x12Parser = (function () {
        function Temp0x12Parser() {
            this.deviceType = 'temp';
            this.frameCode = 0x12;
        }
        Temp0x12Parser.prototype.parseFrame = function (payload, configuration, network) {
            var appContent = { type: '0x12 Temperature configuration' };
            appContent['threshold'] = {
                name: 'probe 2',
                unit: '\u00B0' + 'C',
                high: {
                    value: payload.readInt16BE(2) / 10,
                    hysteresis: payload[4] / 10,
                },
                low: {
                    value: payload.readInt16BE(5) / 10,
                    hysteresis: payload[7] / 10,
                },
            };
            return appContent;
        };
        return Temp0x12Parser;
    }());
    codec.Temp0x12Parser = Temp0x12Parser;
})(codec || (codec = {}));
var codec;
(function (codec) {
    var Temp0x30Parser = (function () {
        function Temp0x30Parser() {
            this.deviceType = 'temp';
            this.frameCode = 0x30;
            this.temp0x43Parser = new codec.Temp0x43Parser();
        }
        Temp0x30Parser.prototype.parseFrame = function (payload, configuration, network) {
            var appContent = this.temp0x43Parser.parseFrame(payload, configuration, network);
            appContent['type'] = '0x30 Temperature keep alive';
            return appContent;
        };
        return Temp0x30Parser;
    }());
    codec.Temp0x30Parser = Temp0x30Parser;
})(codec || (codec = {}));
var codec;
(function (codec) {
    var Temp0x43Parser = (function () {
        function Temp0x43Parser() {
            this.deviceType = 'temp';
            this.frameCode = 0x43;
        }
        Temp0x43Parser.prototype.parseFrame = function (payload, configuration, network) {
            var appContent = { type: '0x43 Temperature data' };
            var temp1 = { name: 'probe 1' };
            var temp2 = { name: 'probe 2' };
            temp1['id'] = (payload[2] & 0xf0) >> 4;
            temp1['unit'] = '\u00B0' + 'C';
            temp1['value'] = payload.readInt16BE(3) / 10;
            temp2['id'] = (payload[5] & 0xf0) >> 4;
            temp2['unit'] = '\u00B0' + 'C';
            temp2['value'] = payload.readInt16BE(6) / 10;
            if ((payload[5] & 0x0f) !== 2) {
                temp1['state'] = payload[2] & 0x01 ? 'activated' : 'deactivated';
                temp2['state'] = payload[5] & 0x01 ? 'activated' : 'deactivated';
            }
            appContent['temperatures'] = [temp1, temp2];
            return appContent;
        };
        return Temp0x43Parser;
    }());
    codec.Temp0x43Parser = Temp0x43Parser;
})(codec || (codec = {}));
var codec;
(function (codec) {
    var TempStatusByteParser = (function () {
        function TempStatusByteParser() {
            this.deviceType = 'temp';
            this.frameCode = 0;
        }
        TempStatusByteParser.prototype.parseFrame = function (payload, configuration, network) {
            var statusContent = {};
            var parser = new codec.GenericStatusByteParser();
            statusContent = parser.parseFrame(payload, configuration);
            statusContent['probe1Alarm'] = Boolean(payload[1] & 0x08);
            statusContent['probe2Alarm'] = Boolean(payload[1] & 0x10);
            return { status: statusContent };
        };
        return TempStatusByteParser;
    }());
    codec.TempStatusByteParser = TempStatusByteParser;
})(codec || (codec = {}));
var codec;
(function (codec) {
    var CommonDecoder = (function () {
        function CommonDecoder() {
        }
        CommonDecoder.prototype.decode = function (payload) {
            var _this = this;
            var frameCode = payload[0];
            var configuration;
            if (frameCode === 0x10) {
                configuration = payload;
            }
            var activeParsers = this.getActiveParsers(frameCode);
            var partialContents = activeParsers.map(function (p) {
                var partialContent;
                try {
                    partialContent = p.parseFrame(payload, configuration, 'unknown', _this.deviceType);
                }
                catch (error) {
                    partialContent = { error: error.toString() };
                }
                return partialContent;
            });
            if (activeParsers.every(function (p) { return p.frameCode < 0; })) {
                partialContents.push({ type: 'Unsupported' });
            }
            var content = Object.assign.apply(Object, __spreadArray([{}], partialContents, false));
            var typestr = content['type'];
            delete content['type'];
            content = Object.assign({ type: typestr }, content);
            return content;
        };
        CommonDecoder.prototype.getActiveParsers = function (frameCode) {
            var activeParsers = [];
            return activeParsers;
        };
        return CommonDecoder;
    }());
    codec.CommonDecoder = CommonDecoder;
})(codec || (codec = {}));
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var codec;
(function (codec) {
    var Decoder = (function (_super) {
        __extends(Decoder, _super);
        function Decoder() {
            var _this = _super.call(this) || this;
            _this.deviceType = 'temp';
            return _this;
        }
        Decoder.prototype.getActiveParsers = function (frameCode) {
            var activeParsers = [];
            var statusByteParsers = new codec.TempStatusByteParser();
            var dataParser;
            switch (frameCode) {
                case 0x10:
                    dataParser = new codec.Temp0x10Parser();
                    break;
                case 0x11:
                    dataParser = new codec.Temp0x11Parser();
                    break;
                case 0x12:
                    dataParser = new codec.Temp0x12Parser();
                    break;
                case 0x30:
                    dataParser = new codec.Temp0x30Parser();
                    break;
                case 0x43:
                    dataParser = new codec.Temp0x43Parser();
                    break;
                case 0x20:
                    dataParser = new codec.Generic0x20Parser();
                    break;
                default:
                    return activeParsers;
            }
            activeParsers = activeParsers.concat(statusByteParsers);
            activeParsers = activeParsers.concat(dataParser);
            return activeParsers;
        };
        return Decoder;
    }(codec.CommonDecoder));
    codec.Decoder = Decoder;
})(codec || (codec = {}));
function decodeUplink(input) {
    var decoder = new codec.Decoder();
    return {
        data: {
            bytes: decoder.decode(input.bytes),
        },
        warnings: [],
        errors: [],
    };
}
