/// <reference path='0x6e.parser.ts' />

import { expect } from 'chai';
import 'mocha';

describe('breath0x6eParser', () => {
  let parser: codec.Breath0x6eParser;

  beforeEach(() => {
    parser = new codec.Breath0x6eParser();
  });

  it('should parse 6E800502DB000C00070003', () => {
    const content = parser.parseFrame(Buffer.from('6E800502DB000C00070003', 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x6e Breath alarm');
    expect(content['tvoc'].alarmStatus).to.equal('active');
    expect(content['tvoc'].value).to.equal(731);
    expect(content['tvoc'].unit).to.equal('µg/m3');
    expect(content['pm10'].alarmStatus).to.equal('inactive');
    expect(content['pm10'].value).to.equal(12);
    expect(content['pm10'].unit).to.equal('µg/m3');
    expect(content['pm25'].alarmStatus).to.equal('active');
    expect(content['pm25'].value).to.equal(7);
    expect(content['pm25'].unit).to.equal('µg/m3');
    expect(content['pm1'].alarmStatus).to.equal('inactive');
    expect(content['pm1'].value).to.equal(3);
    expect(content['pm1'].unit).to.equal('µg/m3');
  });

  it('should parse 6E800A02DB000C00070003', () => {
    const content = parser.parseFrame(Buffer.from('6E800A02DB000C00070003', 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x6e Breath alarm');
    expect(content['tvoc'].alarmStatus).to.equal('inactive');
    expect(content['tvoc'].value).to.equal(731);
    expect(content['tvoc'].unit).to.equal('µg/m3');
    expect(content['pm10'].alarmStatus).to.equal('active');
    expect(content['pm10'].value).to.equal(12);
    expect(content['pm10'].unit).to.equal('µg/m3');
    expect(content['pm25'].alarmStatus).to.equal('inactive');
    expect(content['pm25'].value).to.equal(7);
    expect(content['pm25'].unit).to.equal('µg/m3');
    expect(content['pm1'].alarmStatus).to.equal('active');
    expect(content['pm1'].value).to.equal(3);
    expect(content['pm1'].unit).to.equal('µg/m3');
  });
});
