/// <reference path='0x30.parser.ts' />

import { expect } from 'chai';
import 'mocha';

describe('breath0x30Parser', () => {
  let breath0x30Parser: codec.Breath0x30Parser;

  beforeEach(() => {
    breath0x30Parser = new codec.Breath0x30Parser();
  });
  it('should parse frame 3080000804D30066000500010020000400000001001900030000000100140002', () => {
    const payloadString = '3080000804D30066000500010020000400010001001900030002000100140002';
    const content = breath0x30Parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content['tvoc'].min.value).to.equal(8);
    expect(content['tvoc'].max.value).to.equal(1235);
    expect(content['tvoc'].average.value).to.equal(102);
    expect(content['tvoc'].duration.value).to.equal(5);
    expect(content['pm10'].min.value).to.equal(1);
    expect(content['pm10'].max.value).to.equal(32);
    expect(content['pm10'].average.value).to.equal(4);
    expect(content['pm10'].duration.value).to.equal(1);
    expect(content['pm25'].min.value).to.equal(1);
    expect(content['pm25'].max.value).to.equal(25);
    expect(content['pm25'].average.value).to.equal(3);
    expect(content['pm25'].duration.value).to.equal(2);
    expect(content['pm1'].min.value).to.equal(1);
    expect(content['pm1'].max.value).to.equal(20);
    expect(content['pm1'].average.value).to.equal(2);
  });
  it('should parse frame 308004D3002000190014', () => {
    const payloadString = '308004D3002000190014';
    const content = breath0x30Parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content['tvoc'].max.value).to.equal(1235);
    expect(content['pm10'].max.value).to.equal(32);
    expect(content['pm25'].max.value).to.equal(25);
    expect(content['pm1'].max.value).to.equal(20);
  });
});
