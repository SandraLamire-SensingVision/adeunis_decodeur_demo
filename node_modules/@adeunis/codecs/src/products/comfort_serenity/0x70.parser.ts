namespace codec {
  /**
   * Comfort Serenity 0x70 (alarm) frame parser
   */
  export class ComfortSerenity0x70Parser implements FrameParser {
    readonly deviceType = 'comfortSerenity';
    readonly frameCode = 0x70;

    public parseFrame(payload: Buffer, configuration: Buffer, network: Network) {
      const appContent: Content = { type: '0x70 Comfort Serenity alarm' };
      const payloadLength = payload[1] & 0x04 ? payload.length - 4 : payload.length;

      if (payload[1] & 0x04) {
        // retrieval of the frame date timestamp value, then conversion to epoch 2013 (+1356998400), then in second
        const myDate = new Date((payload.readUInt32BE(payloadLength) + 1356998400) * 1000);
        // As we do not know if timestamp is locale or UTC , do remove 'UTC' indication
        appContent['timestamp'] = myDate.toJSON().replace('Z', '');
      }
      appContent['alarmTemperature'] = {
        alarmStatus: payload[2] & 0x10 ? 'active' : 'inactive',
        temperature: { unit: '\u00B0' + 'C', value: payload.readInt16BE(3) / 10 },
      };

      appContent['alarmHumidity'] = {
        alarmStatus: payload[2] & 0x01 ? 'active' : 'inactive',
        humidity: { unit: '%', value: payload.readUInt8(5) },
      };

      appContent['alarmCo2'] = {
        alarmStatus: payload[2] & 0x20 ? 'active' : 'inactive',
        co2: { unit: 'ppm', value: payload.readInt16BE(6) },
      };

      appContent['alarmVoc'] = {
        alarmStatus: payload[2] & 0x40 ? 'active' : 'inactive',
        voc: { unit: 'index value', value: payload.readInt16BE(8) },
      };

      return appContent;
    }
  }
}
