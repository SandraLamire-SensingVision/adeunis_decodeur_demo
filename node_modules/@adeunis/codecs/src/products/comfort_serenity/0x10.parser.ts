namespace codec {
  /**
   * Comfort Serenity 0x10 (configuration) frame parser
   */
  export class ComfortSerenity0x10Parser implements FrameParser {
    readonly deviceType = 'comfortSerenity';
    readonly frameCode = 0x10;

    public parseFrame(payload: Buffer, configuration: Buffer, network: Network) {
      // register 300: Keep Alive frame TX 0: Disable or 1: Enable H24 frame
      // register 301: Issue period, value betwenn 0 and 65535, 0: disabling periodic transmission
      // register 320: value between 1 and 65535
      // register 321: value between 0 and 65535, 0: no scanning, X2s
      // register 323: value between 1 and 255 : Number of additional (redundant) samples per frame
      // register 324: Black out duration (0: Disable), unit hour
      // register 325: Blackout start time (0h-23h)
      const appContent: Content = { type: '0x10 Comfort Serenity configuration' };

      (appContent['dailyFrameActivated'] = Boolean(payload.readUInt16BE(2) === 0 ? false : true)),
        (appContent['numberOfHistorizationBeforeSending'] = payload.readUInt16BE(4)),
        (appContent['numberOfSamplingBeforeHistorization'] = payload.readUInt16BE(6)),
        (appContent['samplingPeriod'] = { unit: 's', value: payload.readUInt16BE(8) * 2 }),
        (appContent['redundantSamples'] = payload.readUInt8(10)),
        (appContent['calculatedPeriodRecording'] = {
          unit: 's',
          value: payload.readUInt16BE(8) * payload.readUInt16BE(6) * 2,
        }),
        (appContent['calculatedSendingPeriod'] = {
          unit: 's',
          value: payload.readUInt16BE(8) * payload.readUInt16BE(6) * payload.readUInt16BE(4) * 2,
        });
      // Content depends on network
      if (payload.length >= 12) {
        appContent['blackOutDuration'] = { unit: 'h', value: payload.readUInt8(11) };
        appContent['blackOutStartTime'] = { unit: 'h', value: payload.readUInt8(12) };
      }
      return appContent;
    }
  }
}
