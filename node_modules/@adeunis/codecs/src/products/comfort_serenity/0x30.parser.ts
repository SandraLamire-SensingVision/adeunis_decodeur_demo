namespace codec {
  /**
   * Comfort Serenity 0x30 Keep alive / daily frame parser
   */
  export class ComfortSerenity0x30Parser implements FrameParser {
    readonly deviceType = 'comfortSerenity';
    readonly frameCode = 0x30;

    public parseFrame(payload: Buffer, configuration: Buffer, network: Network) {
      const appContent: Content = { type: '0x30 Comfort Serenity Daily frame' };

      if (payload[1] & 0x04) {
        // retrieval of the frame date timestamp value, then conversion to epoch 2013 (+1356998400), then in second
        const myDate = new Date((payload.readUInt32BE(19) + 1356998400) * 1000);
        // As we do not know if timestamp is locale or UTC , do remove 'UTC' indication
        appContent['timestamp'] = myDate.toJSON().replace('Z', '');
      }
      appContent['icone'] = payload.readUInt8(2);
      appContent['qaiRedDuration'] = { unit: 'min', value: payload.readUInt8(3) * 10 };
      appContent['temperatureMax'] = { unit: '\u00B0' + 'C', value: payload.readInt16BE(4) / 10 };
      appContent['co2Max'] = { unit: 'ppm', value: payload.readUInt16BE(6) };
      appContent['humidityMax'] = { unit: '%', value: payload.readUInt8(8) };
      appContent['temperatureMin'] = { unit: '\u00B0' + 'C', value: payload.readInt16BE(9) / 10 };
      // Content depends on network
      switch (payload.length) {
        case 13:
          break;
        case 19:
        case 23:
          appContent['co2Min'] = { unit: 'ppm', value: payload.readUInt16BE(11) };
          appContent['humidityMin'] = { unit: '%', value: payload.readUInt8(13) };
          appContent['temperatureAverage'] = { unit: '\u00B0' + 'C', value: payload.readInt16BE(14) / 10 };
          appContent['co2Average'] = { unit: 'ppm', value: payload.readUInt16BE(16) };
          appContent['humidityAverage'] = { unit: '%', value: payload.readUInt8(18) };
          break;
        default:
          appContent.partialDecoding = PartialDecodingReason.MISSING_NETWORK;
          break;
      }
      return appContent;
    }
  }
}
