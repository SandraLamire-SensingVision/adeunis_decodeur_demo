/// <reference path='0x6a.parser.ts' />

import { expect } from 'chai';
import 'mocha';

describe('ComfortCo20x6aParser', () => {
  let parser: codec.ComfortCo20x6aParser;

  beforeEach(() => {
    parser = new codec.ComfortCo20x6aParser();
  });

  it('should parse data frame 6a8001B33E01A401B43F01A6', () => {
    const payloadString = '6a8001B33E01A401B43F01A6';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x6a Comfort CO2 data');

    expect(content['temperature'].values[0]).to.equal(43.5);
    expect(content['temperature'].values[1]).to.equal(43.6);
    expect(content['humidity'].values[0]).to.equal(62);
    expect(content['humidity'].values[1]).to.equal(63);
    expect(content['co2'].values[0]).to.equal(420);
    expect(content['co2'].values[1]).to.equal(422);
  });

  it('should parse data frame 6a8401B33E01A401B43F01A614ABA3E9', () => {
    const payloadString = '6a8401B33E01A401B43F01A614ABA3E9';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x6a Comfort CO2 data');

    expect(content['timestamp']).to.equal('2023-12-28T19:22:17.000');
    expect(content['temperature'].values[0]).to.equal(43.5);
    expect(content['temperature'].values[1]).to.equal(43.6);
    expect(content['humidity'].values[0]).to.equal(62);
    expect(content['humidity'].values[1]).to.equal(63);
    expect(content['co2'].values[0]).to.equal(420);
    expect(content['co2'].values[1]).to.equal(422);
  });
});
