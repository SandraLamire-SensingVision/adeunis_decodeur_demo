namespace codec {
  /**
   * Comfort CO2 0x6a (historic data) frame parser
   */
  export class ComfortCo20x6aParser implements FrameParser {
    readonly deviceType = 'comfortCo2';
    readonly frameCode = 0x6a;

    public parseFrame(payload: Buffer, configuration: Buffer, network: Network) {
      const appContent: Content = { type: '0x6a Comfort CO2 data' };
      const payloadLength = payload[1] & 0x04 ? payload.length - 4 : payload.length;

      if (payload[1] & 0x04) {
        // retrieval of the frame date timestamp value, then conversion to epoch 2013 (+1356998400), then in second
        const myDate = new Date((payload.readUInt32BE(payloadLength) + 1356998400) * 1000);
        // As we do not know if timestamp is locale or UTC , do remove 'UTC' indication
        appContent['timestamp'] = myDate.toJSON().replace('Z', '');
      }
      let rawValue;
      const temp = [],
        humidity = [],
        CO2 = [];

      // Loop through historic data [t=0, t-1, t-2,...]
      for (let offset = 2; offset < payloadLength; offset += 5) {
        rawValue = payload.readInt16BE(offset);
        temp.push(rawValue / 10);

        rawValue = payload.readUInt8(offset + 2);
        humidity.push(rawValue);

        rawValue = payload.readUInt16BE(offset + 3);
        CO2.push(rawValue);
      }

      appContent['decodingInfo'] = 'values: [t=0, t-1, t-2, ...]';
      appContent['temperature'] = { unit: '\u00B0' + 'C', values: temp };
      appContent['humidity'] = { unit: '%', values: humidity };
      appContent['co2'] = { unit: 'ppm', values: CO2 };

      return appContent;
    }
  }
}
