/// <reference path='0x6b.parser.ts' />

import { expect } from 'chai';
import 'mocha';

describe('ComfortCo20x6bParser', () => {
  let parser: codec.ComfortCo20x6bParser;

  beforeEach(() => {
    parser = new codec.ComfortCo20x6bParser();
  });

  it('should parse 6b800002463201A4', () => {
    const content = parser.parseFrame(Buffer.from('6b800002463201A4', 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x6b Comfort CO2 alarm');

    expect(content['alarmTemperature'].alarmStatus).to.equal('inactive');
    expect(content['alarmTemperature'].temperature.value).to.equal(58.2);
    expect(content['alarmHumidity'].alarmStatus).to.equal('inactive');
    expect(content['alarmHumidity'].humidity.value).to.equal(50);
    expect(content['alarmCo2'].alarmStatus).to.equal('inactive');
    expect(content['alarmCo2'].co2.value).to.equal(420);
  });

  it('should parse 6b843102463201A414ABA3E9', () => {
    const content = parser.parseFrame(Buffer.from('6b843102463201A414ABA3E9', 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x6b Comfort CO2 alarm');

    expect(content['timestamp']).to.equal('2023-12-28T19:22:17.000');
    expect(content['alarmTemperature'].alarmStatus).to.equal('active');
    expect(content['alarmTemperature'].temperature.value).to.equal(58.2);
    expect(content['alarmHumidity'].alarmStatus).to.equal('active');
    expect(content['alarmHumidity'].humidity.value).to.equal(50);
    expect(content['alarmCo2'].alarmStatus).to.equal('active');
    expect(content['alarmCo2'].co2.value).to.equal(420);
  });
});
