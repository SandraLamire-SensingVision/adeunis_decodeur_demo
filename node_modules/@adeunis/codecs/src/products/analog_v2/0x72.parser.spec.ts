/// <reference path='0x72.parser.ts' />

import { expect } from 'chai';
import 'mocha';

describe('Analog20x72Parser', () => {
  let parser: codec.Analog20x72Parser;

  beforeEach(() => {
    parser = new codec.Analog20x72Parser();
  });

  it('should parse 0x72 alarm for channel A with timestamp', () => {
    const payloadString = '7284010104D214ABA3E9';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x72 Analog V2 alarm');
    expect(content['alarms'][0].name).to.equal('channel A');
    expect(content['alarms'][0].unit).to.equal('V');
    expect(content['alarms'][0].alarmStatus).to.equal('highThreshold');
    expect(content['alarms'][0].value).to.equal(1.234);
    expect(content['timestamp']).to.equal('2023-12-28T19:22:17.000');
  });

  it('should parse 0x72 alarm for channel A & B', () => {
    const payloadString = '729005000d8002198F';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x72 Analog V2 alarm');
    expect(content['alarms'][0].name).to.equal('channel A');
    expect(content['alarms'][0].unit).to.equal('V');
    expect(content['alarms'][0].alarmStatus).to.equal('none');
    expect(content['alarms'][0].value).to.equal(3.456);
    expect(content['alarms'][1].name).to.equal('channel B');
    expect(content['alarms'][1].unit).to.equal('V');
    expect(content['alarms'][1].alarmStatus).to.equal('lowThreshold');
    expect(content['alarms'][1].value).to.equal(6.543);
  });
});
