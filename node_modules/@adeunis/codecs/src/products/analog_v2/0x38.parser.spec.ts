/// <reference path='0x38.parser.ts' />

import { expect } from 'chai';
import 'mocha';

describe('Analog20x38Parser', () => {
  let parser: codec.Analog20x38Parser;

  beforeEach(() => {
    parser = new codec.Analog20x38Parser();
  });

  it('should parse 0x38 single channel A', () => {
    const payloadString = '3880011F401388';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x38 Analog V2 keep alive');
    expect(content['channels'][0].name).to.equal('channel A');
    expect(content['channels'][0].unit).to.equal('V');
    expect(content['channels'][0].values[0]).to.equal(8);
    expect(content['channels'][0].values[1]).to.equal(5);
  });

  it('should parse 0x38 single channel B', () => {
    const payloadString = '38800C1F401388';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x38 Analog V2 keep alive');
    expect(content['channels'][0].name).to.equal('channel B');
    expect(content['channels'][0].unit).to.equal('mA');
    expect(content['channels'][0].values[0]).to.equal(8);
    expect(content['channels'][0].values[1]).to.equal(5);
  });

  it('should parse 0x38 single channel B timestamp', () => {
    const payloadString = '38840C1F40138814ABA3E9';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x38 Analog V2 keep alive');
    expect(content['channels'][0].name).to.equal('channel B');
    expect(content['channels'][0].unit).to.equal('mA');
    expect(content['channels'][0].values[0]).to.equal(8);
    expect(content['channels'][0].values[1]).to.equal(5);
    expect(content['timestamp']).to.equal('2023-12-28T19:22:17.000');
  });

  it('should parse 0x38 single channel A & B', () => {
    const payloadString = '38800D1FBB14EA0FA012C0';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x38 Analog V2 keep alive');
    expect(content['channels'][0].unit).to.equal('V');
    expect(content['channels'][0].values[0]).to.equal(8.123);
    expect(content['channels'][0].values[1]).to.equal(4);
    expect(content['channels'][1].unit).to.equal('mA');
    expect(content['channels'][1].values[0]).to.equal(5.354);
    expect(content['channels'][1].values[1]).to.equal(4.8);
  });
});
