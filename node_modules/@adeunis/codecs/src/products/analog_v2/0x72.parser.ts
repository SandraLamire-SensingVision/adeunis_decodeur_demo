namespace codec {
  /**
   * Analog V2 0x72 (alarm) frame parser
   */
  export class Analog20x72Parser implements FrameParser {
    readonly deviceType = 'analog2';
    readonly frameCode = 0x72;

    public parseFrame(payload: Buffer, configuration: Buffer, network: Network) {
      const appContent: Content = { type: '0x72 Analog V2 alarm' };
      const alarms: Content = [];
      const nbSensors = (payload[2] & 0x01 ? 1 : 0) + (payload[2] & 0x04 ? 1 : 0);

      //Only channel B is active
      if (nbSensors == 1 && payload[2] & 0x04) {
        alarms['push']({
          name: 'channel B',
          alarmStatus: this.getAlarmStatusText(payload.readUInt8(3)),
          unit: payload[2] & 0x08 ? 'mA' : 'V',
          value: payload.readUInt16BE(4) / 1000,
        });
      } else {
        alarms['push']({
          name: 'channel A',
          alarmStatus: this.getAlarmStatusText(payload.readUInt8(3)),
          unit: payload[2] & 0x02 ? 'mA' : 'V',
          value: payload.readUInt16BE(4) / 1000,
        });
      }

      if (nbSensors === 2) {
        alarms['push']({
          name: 'channel B',
          alarmStatus: this.getAlarmStatusText(payload.readUInt8(6)),
          unit: payload[2] & 0x08 ? 'mA' : 'V',
          value: payload.readUInt16BE(7) / 1000,
        });
      }
      appContent['alarms'] = alarms;

      if (payload[1] & 0x04) {
        // retrieval of the frame date timestamp value, then conversion to epoch 2013 (+1356998400), then in second
        const myDate = new Date((payload.readUInt32BE(payload.length - 4) + 1356998400) * 1000);
        // As we do not know if timestamp is locale or UTC , do remove 'UTC' indication
        appContent['timestamp'] = myDate.toJSON().replace('Z', '');
      }

      appContent['alarms'] = alarms;

      return appContent;
    }

    /**
     * Get Alarm status text
     * @param value value
     */
    private getAlarmStatusText(value: number) {
      switch (value) {
        case 1:
          return 'highThreshold';
        case 2:
          return 'lowThreshold';
        case 3:
          return 'inputEvent';
        default:
          return 'none';
      }
    }
  }
}
