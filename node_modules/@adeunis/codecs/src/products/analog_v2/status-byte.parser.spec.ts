/// <reference path='status-byte.parser.ts' />

import { expect } from 'chai';
import 'mocha';

describe('Analog2StatusByteParser', () => {
  let parser: codec.Analog2StatusByteParser;

  beforeEach(() => {
    parser = new codec.Analog2StatusByteParser();
  });

  it('should parse 20420501', () => {
    const payloadString = '20420501';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content['status']['frameCounter']).to.equal(2);
    expect(content['status']['lowBattery']).to.equal(true);
    expect(content['status']['alarmChannelA']).to.be.undefined;
    expect(content['status']['alarmChannelB']).to.be.undefined;
    expect(content['status']['configurationInconsistency']).to.equal(false);
  });

  it('should parse 20990501', () => {
    const payloadString = '20990501';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content['status']['frameCounter']).to.equal(4);
    expect(content['status']['lowBattery']).to.equal(false);
    expect(content['status']['configurationDone']).to.equal(true);
    expect(content['status']['alarmChannelA']).to.be.undefined;
    expect(content['status']['alarmChannelB']).to.be.undefined;
    expect(content['status']['configurationInconsistency']).to.equal(true);
  });

  it('should parse inconsistency flag', () => {
    const payloadString = '71880D1FBB14EA0FA012C0';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content['status']['configurationInconsistency']).to.equal(true);
    expect(content['status']['alarmChannelA']).to.be.undefined;
    expect(content['status']['alarmChannelB']).to.be.undefined;
  });

  it('should parse 30580110000002100000', () => {
    const payloadString = '30580110000002100000';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content['status']['frameCounter']).to.equal(2);
    expect(content['status']['lowBattery']).to.equal(false);
    expect(content['status']['alarmChannelA']).to.equal(true);
    expect(content['status']['alarmChannelB']).to.equal(true);
    expect(content['status']['configurationInconsistency']).to.be.undefined;
  });

  it('should parse 42420110000002100000', () => {
    const payloadString = '42420110000002100000';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content['status']['frameCounter']).to.equal(2);
    expect(content['status']['lowBattery']).to.equal(true);
    expect(content['status']['alarmChannelA']).to.equal(false);
    expect(content['status']['alarmChannelB']).to.equal(false);
    expect(content['status']['configurationInconsistency']).to.be.undefined;
  });
});
