/// <reference path='0x30.parser.ts' />

import { expect } from 'chai';
import 'mocha';

describe('Drycontacts20x30Parser', () => {
  let parser: codec.Drycontacts20x30Parser;

  beforeEach(() => {
    parser = new codec.Drycontacts20x30Parser();
  });

  it('should parse 30C200010100000500020A', () => {
    const payloadString = '30C200010100000500020A';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x30 Dry Contacts 2 keep alive');
    expect(content['channelA'].value).to.equal(1);
    expect(content['channelA'].state).to.equal(false);
    expect(content['channelB'].value).to.equal(256);
    expect(content['channelB'].state).to.equal(true);
    expect(content['channelC'].value).to.equal(5);
    expect(content['channelC'].state).to.equal(false);
    expect(content['channelD'].value).to.equal(2);
    expect(content['channelD'].state).to.equal(true);
  });

  it('should parse 30C600010100000500020A14ABA3E9', () => {
    const payloadString = '30C600010100000500020A14ABA3E9';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x30 Dry Contacts 2 keep alive');

    expect(content['timestamp']).to.equal('2023-12-28T19:22:17.000');
    expect(content['channelA'].value).to.equal(1);
    expect(content['channelA'].state).to.equal(false);
    expect(content['channelB'].value).to.equal(256);
    expect(content['channelB'].state).to.equal(true);
    expect(content['channelC'].value).to.equal(5);
    expect(content['channelC'].state).to.equal(false);
    expect(content['channelD'].value).to.equal(2);
    expect(content['channelD'].state).to.equal(true);
  });
});
