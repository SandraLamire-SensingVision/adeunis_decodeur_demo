/// <reference path='0x59.parser.ts' />

import { expect } from 'chai';
import 'mocha';

describe('Drycontacts20x59Parser', () => {
  let parser: codec.Drycontacts20x59Parser;

  beforeEach(() => {
    parser = new codec.Drycontacts20x59Parser();
  });

  it('should parse 59400A0000010000000200', () => {
    const payloadString = '59400A0000010000000200';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x59 Dry Contacts 2 time counting data');
    expect(content).to.not.have.property('channelATimeCounter');
    expect(content['channelBTimeCounter'].value).to.equal(256);
    expect(content).to.not.have.property('channelCTimeCounter');
    expect(content['channelDTimeCounter'].value).to.equal(512);
  });

  it('should parse 5940050000010000000200', () => {
    const payloadString = '5940050000010000000200';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x59 Dry Contacts 2 time counting data');
    expect(content['channelATimeCounter'].value).to.equal(256);
    expect(content).to.not.have.property('channelBTimeCounter');
    expect(content['channelCTimeCounter'].value).to.equal(512);
    expect(content).to.not.have.property('channelDTimeCounter');
  });

  it('should parse 59400F00000001000000020000000300000004', () => {
    const payloadString = '59400F00000001000000020000000300000004';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x59 Dry Contacts 2 time counting data');
    expect(content['channelATimeCounter'].value).to.equal(1);
    expect(content['channelBTimeCounter'].value).to.equal(2);
    expect(content['channelCTimeCounter'].value).to.equal(3);
    expect(content['channelDTimeCounter'].value).to.equal(4);
  });

  it('should parse 59440A000001000000020014ABA3E9', () => {
    const payloadString = '59440A000001000000020014ABA3E9';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x59 Dry Contacts 2 time counting data');
    expect(content['timestamp']).to.equal('2023-12-28T19:22:17.000');
    expect(content).to.not.have.property('channelATimeCounter');
    expect(content['channelBTimeCounter'].value).to.equal(256);
    expect(content).to.not.have.property('channelCTimeCounter');
    expect(content['channelDTimeCounter'].value).to.equal(512);
  });

  it('should parse 59440F0000000100000002000000030000000414ABA3E9', () => {
    const payloadString = '59440F0000000100000002000000030000000414ABA3E9';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x59 Dry Contacts 2 time counting data');
    expect(content['timestamp']).to.equal('2023-12-28T19:22:17.000');
    expect(content['channelATimeCounter'].value).to.equal(1);
    expect(content['channelBTimeCounter'].value).to.equal(2);
    expect(content['channelCTimeCounter'].value).to.equal(3);
    expect(content['channelDTimeCounter'].value).to.equal(4);
  });
});
