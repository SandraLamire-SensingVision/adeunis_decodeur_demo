namespace codec {
  /**
   * Dry Contacts 2 0x59 time counting data frame parser
   */
  export class Drycontacts20x59Parser implements FrameParser {
    readonly deviceType = 'drycontacts2';
    readonly frameCode = 0x59;

    public parseFrame(payload: Buffer, configuration: Buffer, network: Network) {
      const appContent: Content = { type: '0x59 Dry Contacts 2 time counting data' };

      // Concerns only Lora products
      if (payload[1] & 0x04) {
        // retrieval of the frame date timestamp value, then conversion to epoch 2013 (+1356998400), then in second
        const myDate = new Date((payload.readUInt32BE(payload.length - 4) + 1356998400) * 1000);
        // As we do not know if timestamp is locale or UTC , do remove 'UTC' indication
        appContent['timestamp'] = myDate.toJSON().replace('Z', '');
      }

      let offset = 3;

      if (payload[2] & 0x01) {
        appContent['channelATimeCounter'] = { unit: 's', value: payload.readUInt32BE(offset) };
        offset += 4;
      }
      if (payload[2] & 0x02) {
        appContent['channelBTimeCounter'] = { unit: 's', value: payload.readUInt32BE(offset) };
        offset += 4;
      }
      if (payload[2] & 0x04) {
        appContent['channelCTimeCounter'] = { unit: 's', value: payload.readUInt32BE(offset) };
        offset += 4;
      }
      if (payload[2] & 0x08) {
        appContent['channelDTimeCounter'] = { unit: 's', value: payload.readUInt32BE(offset) };
      }

      return appContent;
    }
  }
}
