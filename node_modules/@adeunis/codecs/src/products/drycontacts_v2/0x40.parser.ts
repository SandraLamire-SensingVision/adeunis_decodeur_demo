namespace codec {
  /**
   * Dry Contacts 0x40 (data) frame parser
   */
  export class Drycontacts20x40Parser implements FrameParser {
    readonly deviceType = 'drycontacts2';
    readonly frameCode = 0x40;

    public parseFrame(payload: Buffer, configuration: Buffer, network: Network) {
      const appContent: Content = { type: '0x40 Dry Contacts 2 data' };

      if (payload[1] & 0x04) {
        // retrieval of the frame date timestamp value, then conversion to epoch 2013 (+1356998400), then in second
        const myDate = new Date((payload.readUInt32BE(11) + 1356998400) * 1000);
        // As we do not know if timestamp is locale or UTC , do remove 'UTC' indication
        appContent['timestamp'] = myDate.toJSON().replace('Z', '');
      }

      appContent['decodingInfo'] = 'true: ON/CLOSED, false: OFF/OPEN';
      appContent['channelA'] = {
        value: payload.readUInt16BE(2),
        currentState: Boolean(payload[10] & 0x01),
        previousFrameState: Boolean(payload[10] & 0x02),
      };
      appContent['channelB'] = {
        value: payload.readUInt16BE(4),
        currentState: Boolean(payload[10] & 0x04),
        previousFrameState: Boolean(payload[10] & 0x08),
      };
      appContent['channelC'] = {
        value: payload.readUInt16BE(6),
        currentState: Boolean(payload[10] & 0x10),
        previousFrameState: Boolean(payload[10] & 0x20),
      };
      appContent['channelD'] = {
        value: payload.readUInt16BE(8),
        currentState: Boolean(payload[10] & 0x40),
        previousFrameState: Boolean(payload[10] & 0x80),
      };

      return appContent;
    }
  }
}
