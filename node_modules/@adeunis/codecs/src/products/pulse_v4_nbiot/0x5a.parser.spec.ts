/// <reference path='0x5a.parser.ts' />

import { expect } from 'chai';
import 'mocha';

describe('PulseV4NbIot0x5aParser', () => {
  let PulseV4NbIot0x5aParser: codec.PulseV4NbIot0x5aParser;

  beforeEach(() => {
    PulseV4NbIot0x5aParser = new codec.PulseV4NbIot0x5aParser();
  });

  it('should parse 0x5a frame', () => {
    const payloadString = '112233445566778803000000005a8400000127000100020003000414ABA3E9';
    const content = PulseV4NbIot0x5aParser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x5a Pulse 4 NB-IoT data - channel A');
    expect(content['timestamp']).to.equal('2023-12-28T19:22:17.000');
    expect(content['counterValues'][0]).to.equal(295);
    expect(content['counterValues'][1]).to.equal(294);
    expect(content['counterValues'][2]).to.equal(292);
    expect(content['counterValues'][3]).to.equal(289);
    expect(content['counterValues'][4]).to.equal(285);
  });

  it('should parse 5a frame limit', () => {
    const payloadString = '112233445566778803000000005a20FFFFFFFFFFFFFFFFFFFFFFFF';
    const content = PulseV4NbIot0x5aParser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x5a Pulse 4 NB-IoT data - channel A');
    expect(content['counterValues'][0]).to.equal(4294967295);
    expect(content['counterValues'][1]).to.equal(4294901760);
    expect(content['counterValues'][2]).to.equal(4294836225);
    expect(content['counterValues'][3]).to.equal(4294770690);
    expect(content['counterValues'][4]).to.equal(4294705155);
  });
});
