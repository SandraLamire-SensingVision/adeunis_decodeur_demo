/// <reference path='0x30.parser.ts' />

import { expect } from 'chai';
import 'mocha';

describe('PulseV4NbIot0x30Parser', () => {
  let parser: codec.PulseV4NbIot0x30Parser;

  beforeEach(() => {
    parser = new codec.PulseV4NbIot0x30Parser();
  });

  it('should parse 0x30 frame', () => {
    const payloadString = '1122334455667788030000000030e0150400030002000100';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x30 Pulse 4 NB-IoT keep alive');
    expect(content['channels'][0].name).to.equal('channel A');
    expect(content['channels'][0].flow.alarm).to.equal(true);
    expect(content['channels'][0].flow.last24hMin).to.equal(512);
    expect(content['channels'][0].flow.last24hMax).to.equal(1024);
    expect(content['channels'][0].tamperAlarm).to.equal(true);
    expect(content['channels'][0].leakageAlarm).to.equal(true);
    expect(content['channels'][1].name).to.equal('channel B');
    expect(content['channels'][1].flow.alarm).to.equal(false);
    expect(content['channels'][1].flow.last24hMin).to.equal(256);
    expect(content['channels'][1].flow.last24hMax).to.equal(768);
    expect(content['channels'][1].tamperAlarm).to.equal(false);
    expect(content['channels'][1].leakageAlarm).to.equal(false);
  });
  it('should parse 0x30 frame with timestamp', () => {
    const payloadString = '11223344556677880300000000303415040003000200010014ABA3E9';
    const content = parser.parseFrame(Buffer.from(payloadString, 'hex'), Buffer.from(''), 'unknown');
    expect(content.type).to.equal('0x30 Pulse 4 NB-IoT keep alive');
    expect(content['channels'][0].name).to.equal('channel A');
    expect(content['channels'][0].flow.alarm).to.equal(true);
    expect(content['channels'][0].flow.last24hMin).to.equal(512);
    expect(content['channels'][0].flow.last24hMax).to.equal(1024);
    expect(content['channels'][0].tamperAlarm).to.equal(true);
    expect(content['channels'][0].leakageAlarm).to.equal(true);
    expect(content['channels'][1].name).to.equal('channel B');
    expect(content['channels'][1].flow.alarm).to.equal(false);
    expect(content['channels'][1].flow.last24hMin).to.equal(256);
    expect(content['channels'][1].flow.last24hMax).to.equal(768);
    expect(content['channels'][1].tamperAlarm).to.equal(false);
    expect(content['channels'][1].leakageAlarm).to.equal(false);
    expect(content['timestamp']).to.equal('2023-12-28T19:22:17.000');
  });
});
