namespace codec {
  /**
   * Pulse V4 status byte parser
   */
  export class PulseV4NbIotStatusByteParser implements FrameParser {
    readonly deviceType = 'pulse4nbiot';
    readonly frameCode = 0;

    // Offset to add in order to jump NB-Iot additional header
    readonly hOffset = 13;

    public parseFrame(payload: Buffer, configuration: Buffer, network: Network) {
      const headerContent: Content = {};
      const statusContent: Content = {};

      // Include in status byte parser also NB-IoT header (13 bytes length):
      // 0-7	IMEI	International Mobile Equipment Identity (IMEI) of the product (15 digits in BCD format).
      // 8	Radio Signal quality	Value from 0 to 5.
      // 9-12	Frame counter	Frame counter since product reset.
      headerContent['imei'] = payload.readUInt32BE(0).toString(16) + payload.readUInt32BE(4).toString(16);
      headerContent['signalQuality'] = payload[8];
      headerContent['globalFrameCounter'] = payload.readUInt32BE(9);

      // Status byte, applicative flags
      statusContent['frameCounter'] = (payload[this.hOffset + 1] & 0xe0) >> 5;
      statusContent['lowBattery'] = Boolean(payload[this.hOffset + 1] & 0x02);
      statusContent['configurationDone'] = Boolean(payload[this.hOffset + 1] & 0x01);
      statusContent['timestamp'] = Boolean(payload[this.hOffset + 1] & 0x04);

      return { nbIot: headerContent, status: statusContent };
    }
  }
}
