namespace codec {
  /**
   * TIC 0x49 (data) frame parser
   */
  export class Tic0x49Parser implements FrameParser {
    readonly deviceType = 'ticPmePmi|ticCbeLinkyMono|ticCbeLinkyTri';
    readonly frameCode = 0x49;

    public parseFrame(payload: Buffer, configuration: Buffer, network: Network, deviceType: string) {
      let appContent: Content = { type: '0x49 TIC data' };

      if (deviceType === 'ticCbeLinkyMono') {
        appContent = this.payloadToString(payload, 2, 2 + 12, appContent, 'ADCO');
        appContent = this.payloadToString(payload, 14, 14 + 4, appContent, 'OPTARIF');
        appContent = this.payloadToValue(payload, 18, 'Wh', appContent, 'BASE');
        appContent = this.payloadToValue(payload, 22, 'A', appContent, 'ISOUSC');
        appContent = this.payloadToValue(payload, 26, 'A', appContent, 'IINST');
        appContent = this.payloadToValue(payload, 30, 'A', appContent, 'IMAX');
        appContent = this.payloadToValue(payload, 34, 'VA', appContent, 'PAPP');
        appContent = this.payloadToValue(payload, 38, 'Wh', appContent, 'HCHC');
        appContent = this.payloadToValue(payload, 42, 'Wh', appContent, 'HCHP');
        appContent = this.payloadToString(payload, 46, 46 + 4, appContent, 'PTEC');
      } else if (deviceType === 'ticCbeLinkyTri') {
        appContent = this.payloadToString(payload, 2, 2 + 12, appContent, 'ADCO');
        appContent = this.payloadToValue(payload, 14, 'Wh', appContent, 'BASE');
        appContent = this.payloadToValue(payload, 18, 'A', appContent, 'IINST1');
        appContent = this.payloadToValue(payload, 22, 'A', appContent, 'IINST2');
        appContent = this.payloadToValue(payload, 26, 'A', appContent, 'IINST3');
        appContent = this.payloadToValue(payload, 30, 'A', appContent, 'IMAX1');
        appContent = this.payloadToValue(payload, 34, 'A', appContent, 'IMAX2');
        appContent = this.payloadToValue(payload, 38, 'A', appContent, 'IMAX3');
        appContent = this.payloadToValue(payload, 42, 'W', appContent, 'PMAX');
        appContent = this.payloadToValue(payload, 46, 'VA', appContent, 'PAPP');
      } else if (deviceType === 'ticPmePmi') {
        appContent = this.payloadToDate(payload, 2, deviceType, appContent, 'DATE');
        appContent = this.payloadToValue(payload, 8, 'Wh', appContent, 'EA_s');
        appContent = this.payloadToValue(payload, 12, 'varh', appContent, 'ER+_s');
        appContent = this.payloadToValue(payload, 16, 'varh', appContent, 'ER-_s');
        appContent = this.payloadToValue(payload, 20, 'VAh', appContent, 'EAPP_s');
        appContent = this.payloadToString(payload, 24, 24 + 3, appContent, 'PTCOUR1');
        appContent = this.payloadToValue(payload, 27, 'kWh', appContent, 'EAP_s');
        appContent = this.payloadToValue(payload, 31, 'kvarh', appContent, 'ER+P_s');
        appContent = this.payloadToValue(payload, 35, 'kvarh', appContent, 'ER-P_s');
        appContent = this.payloadToValue(payload, 39, 'kWh', appContent, 'EaP-1_s');
        appContent = this.payloadToValue(payload, 43, 'kvarh', appContent, 'ER+P-1_s');
        appContent = this.payloadToValue(payload, 47, 'kvarh', appContent, 'ER-P-1_s');
      }

      return appContent;
    }

    private payloadToString(payload: Buffer, start: number, end: number, appContent: Content, label: string) {
      const charCode: number[] = [];
      for (let i = start; i < end; i++) {
        if (payload[i] !== 0x00) {
          charCode.push(payload[i]);
        }
      }
      const str = String.fromCharCode(...charCode);
      if (str.length > 0) {
        appContent[`${label}`] = str;
      } else {
        appContent[`${label}status`] = 'notFound';
      }

      return appContent;
    }

    private payloadToValue(payload: Buffer, start: number, unit: string, appContent: Content, label: string) {
      const val = payload.readUInt32BE(start);
      if (val !== 0x80000000) {
        appContent[`${label}`] = { unit: unit, value: val };
      } else {
        appContent[`${label}status`] = 'notFound';
      }

      return appContent;
    }

    private p2d(val: number) {
      return ('0' + val).slice(-2);
    }

    private payloadToDate(payload: Buffer, start: number, deviceType: string, appContent: Content, label: string) {
      let str = '2000-01-01T00:00:00';
      if (deviceType === 'ticPmePmi') {
        // format iso8601 : 2020-4-21T13:43:5
        str =
          2000 +
          payload[start + 2] +
          '-' +
          this.p2d(payload[start + 1]) +
          '-' +
          this.p2d(payload[start + 0]) +
          'T' +
          this.p2d(payload[start + 3]) +
          ':' +
          this.p2d(payload[start + 4]) +
          ':' +
          this.p2d(payload[start + 5]);
      }

      if (str !== '2000-01-01T00:00:00') {
        appContent[`${label}`] = str;
      } else {
        appContent[`${label}status`] = 'notFound';
      }

      return appContent;
    }
  }
}
