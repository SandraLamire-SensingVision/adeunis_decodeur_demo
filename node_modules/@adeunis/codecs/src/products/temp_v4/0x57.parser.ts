namespace codec {
  /**
   * Temp 4 0x57 (data) frame parser
   */
  export class TempV40x57Parser implements FrameParser {
    readonly deviceType = 'temp4';
    readonly frameCode = 0x57;

    public parseFrame(payload: Buffer, configuration: Buffer, network: Network) {
      const appContent: Content = { type: '0x57 Temp 4 periodic data' };
      const nbSensors = payload[1] & 0x10 ? 2 : 1;
      let rawValue;
      const temperatures: Content = [];
      const ch1Temp = [],
        ch2Temp = [];

      const payloadLength = payload[1] & 0x04 ? payload.length - 4 : payload.length;

      // if the timestamp flag is true or false
      // if (payload[1] & 0x04) {
      // Loop through historic data [t=0, t-1, t-2,...]
      // value@-3276.8 must be considered as an invalid measure (probe disconnected for instance)
      // we subtract 4 bytes from the total length of the frame to deduce the timestamp
      for (let offset = 2; offset < payloadLength; offset += 2 * nbSensors) {
        rawValue = payload.readInt16BE(offset);
        ch1Temp.push(rawValue / 10);

        if (nbSensors === 2) {
          rawValue = payload.readInt16BE(offset + 2);
          ch2Temp.push(rawValue / 10);
        }
      }

      if (payload[1] & 0x04) {
        // retrieval of the frame date timestamp value, then conversion to epoch 2013 (+1356998400), then in second
        const myDate = new Date((payload.readUInt32BE(payload.length - 4) + 1356998400) * 1000);
        // As we do not know if timestamp is locale or UTC , do remove 'UTC' indication
        appContent['timestamp'] = myDate.toJSON().replace('Z', '');
      }

      appContent['decodingInfo'] = 'values: [t=0, t-1, t-2, ...]';
      // value@-3276.8 must be considered as an invalid measure (probe disconnected for instance)
      temperatures['push']({ name: 'temperature 1', unit: '\u00B0' + 'C', values: ch1Temp });
      if (nbSensors === 2) {
        temperatures['push']({ name: 'temperature 2', unit: '\u00B0' + 'C', values: ch2Temp });
      }
      appContent['temperatures'] = temperatures;

      return appContent;
    }
  }
}
