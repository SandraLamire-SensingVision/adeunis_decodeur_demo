namespace codec {
  /**
   * Temp 4 0x58 (alarm) frame parser
   */
  export class TempV40x58Parser implements FrameParser {
    readonly deviceType = 'temp4';
    readonly frameCode = 0x58;

    public parseFrame(payload: Buffer, configuration: Buffer, network: Network) {
      const appContent: Content = { type: '0x58 Temp 4 alarm' };
      const alarms: Content = [];
      const nbSensors = payload[1] & 0x10 ? 2 : 1;

      // offsetType for date timestamp position
      const offsetType = nbSensors === 2 ? 8 : 5;

      alarms['push']({
        name: 'temperature 1',
        alarmStatus: this.getAlarmStatusText(payload.readUInt8(2)),
        temperature: { unit: '\u00B0' + 'C', value: payload.readInt16BE(3) / 10 },
      });

      if (nbSensors === 2) {
        alarms['push']({
          name: 'temperature 2',
          alarmStatus: this.getAlarmStatusText(payload.readUInt8(5)),
          temperature: { unit: '\u00B0' + 'C', value: payload.readInt16BE(6) / 10 },
        });
      }
      if (payload[1] & 0x04) {
        // retrieval of the frame date timestamp value, then conversion to epoch 2013 (+1356998400), then in second
        const myDate = new Date((payload.readUInt32BE(offsetType) + 1356998400) * 1000);
        // As we do not know if timestamp is locale or UTC , do remove 'UTC' indication
        appContent['timestamp'] = myDate.toJSON().replace('Z', '');
      }

      appContent['alarms'] = alarms;

      return appContent;
    }

    /**
     * Get Alarm status text
     * @param value value
     */
    private getAlarmStatusText(value: number) {
      switch (value) {
        case 1:
          return 'highThreshold';
        case 2:
          return 'lowThreshold';
        default:
          return 'none';
      }
    }
  }
}
