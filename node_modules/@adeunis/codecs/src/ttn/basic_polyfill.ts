/* eslint-disable @typescript-eslint/no-this-alias */
interface Object {
  // 👇️ function log - no parameters, returns object
  readInt8(offset: number): number;

  readUInt8(offset: number): number;

  readInt16BE(offset: number): number;

  readUInt16BE(offset: number): number;

  readInt32BE(offset: number): number;

  readUInt32BE(offset: number): number;

  readFloatBE(offset: number): number;
}

Object.prototype.readInt8 = function (offset: number) {
  const buffer: any = this;
  const a = buffer[offset];
  if ((a & 0x80) > 0) {
    return a - 0x100;
  }
  return a;
};

Object.prototype.readUInt8 = function (offset: number) {
  const buffer: any = this;
  return buffer[offset];
};

Object.prototype.readInt16BE = function (offset: number) {
  const buffer: any = this;
  const a = (buffer[offset] << 8) | buffer[offset + 1];
  if ((a & 0x8000) > 0) {
    return a - 0x10000;
  }
  return a;
};

Object.prototype.readUInt16BE = function (offset: number) {
  const buffer: any = this;
  return (buffer[offset] << 8) | buffer[offset + 1];
};

Object.prototype.readInt32BE = function (offset: number) {
  const buffer: any = this;
  return (buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3];
};

Object.prototype.readUInt32BE = function (offset: number) {
  const buffer: any = this;
  return ((buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3]) >>> 0;
};

Object.prototype.readFloatBE = function (offset: number) {
  const buffer: any = this;
  const value = ((buffer[offset] << 24) | (buffer[offset + 1] << 16) | (buffer[offset + 2] << 8) | buffer[offset + 3]) >>> 0;
  return new Float32Array(new Uint32Array([value]).buffer)[0];
};
