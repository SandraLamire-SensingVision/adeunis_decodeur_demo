namespace codec {
  export class CommonDecoder {
    protected deviceType!: string;

    /**
     * Decode given payload.
     * @returns decoded data as JSON object
     * @param payload buffer to decode
     */
    public decode(payload: Buffer): Content {
      const frameCode = payload[0];

      // Handle configuration
      let configuration: Buffer;
      if (frameCode === 0x10) {
        configuration = payload;
      }

      // Handle specific parsing
      const activeParsers = this.getActiveParsers(frameCode);
      const partialContents = activeParsers.map(p => {
        let partialContent: Content;
        try {
          partialContent = p.parseFrame(payload, configuration, 'unknown', this.deviceType);
        } catch (error) {
          partialContent = { error: (error as Error).toString() };
        }
        return partialContent;
      });

      // Handle unsupported
      if (activeParsers.every(p => p.frameCode < 0)) {
        partialContents.push({ type: 'Unsupported' });
      }

      // Merge partial contents
      let content = Object.assign({}, ...partialContents);

      // Put 'type' at first position
      const typestr = content['type'];
      delete content['type'];
      content = Object.assign({ type: typestr }, content);

      return content as Content;
    }

    /**
     * Get active parsers
     * @param frameCode frame code
     */
    protected getActiveParsers(frameCode: number): FrameParser[] {
      const activeParsers: FrameParser[] = [];
      return activeParsers;
    }
  }
}
