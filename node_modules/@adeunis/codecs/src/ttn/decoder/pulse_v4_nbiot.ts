namespace codec {
  /**
   * Decoder class.
   *
   * Main class for decoding purposes.
   * Contains declaration of all required parsers and decode() method (API entry point).
   *
   * See below for explanations on parsers.
   */
  export class Decoder extends CommonDecoder {
    constructor() {
      super();
      this.deviceType = 'pulse4nbiot';
    }

    public override decode(payload: Buffer) {
      const frameCode = payload[13];

      // Handle configuration
      let configuration: Buffer;
      if (frameCode === 0x10) {
        configuration = payload;
      }

      // Handle specific parsing
      const activeParsers = this.getActiveParsers(frameCode);
      const partialContents = activeParsers.map(p => {
        let partialContent: Content;
        try {
          partialContent = p.parseFrame(payload, configuration, 'unknown', this.deviceType);
        } catch (error) {
          partialContent = { error: (error as Error).toString() };
        }
        return partialContent;
      });

      // Handle unsupported
      if (activeParsers.every(p => p.frameCode < 0)) {
        partialContents.push({ type: 'Unsupported' });
      }

      // Merge partial contents
      let content = Object.assign({}, ...partialContents);

      // Put 'type' at first position
      const typestr = content['type'];
      delete content['type'];
      content = Object.assign({ type: typestr }, content);

      return content as Content;
    }

    /**
     * Get active parsers

     * @param frameCode frame code
     */
    protected override getActiveParsers(frameCode: number): FrameParser[] {
      let activeParsers: FrameParser[] = [];

      // status byte parser
      const statusByteParsers = new PulseV4NbIotStatusByteParser();

      // Find the specific parser
      let dataParser: FrameParser;
      switch (frameCode) {
        case 0x10:
          dataParser = new PulseV4NbIot0x10Parser();
          break;
        case 0x20:
          dataParser = new PulseV4NbIot0x20Parser();
          break;
        case 0x30:
          dataParser = new PulseV4NbIot0x30Parser();
          break;
        case 0x33:
          dataParser = new PulseV4NbIot0x33Parser();
          break;
        case 0x46:
          dataParser = new PulseV4NbIot0x46Parser();
          break;
        case 0x47:
          dataParser = new PulseV4NbIot0x47Parser();
          break;
        case 0x5a:
          dataParser = new PulseV4NbIot0x5aParser();
          break;
        case 0x5b:
          dataParser = new PulseV4NbIot0x5bParser();
          break;
        default:
          return activeParsers;
      }

      activeParsers = activeParsers.concat(statusByteParsers);
      activeParsers = activeParsers.concat(dataParser);

      // Return active parser
      return activeParsers;
    }
  }
}
