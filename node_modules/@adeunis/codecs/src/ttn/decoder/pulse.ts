namespace codec {
  /**
   * Decoder class.
   *
   * Main class for decoding purposes.
   * Contains declaration of all required parsers and decode() method (API entry point).
   *
   * See below for explanations on parsers.
   */
  export class Decoder extends CommonDecoder {
    constructor() {
      super();
      this.deviceType = 'pulse';
    }

    /**
     * Get active parsers

     * @param frameCode frame code
     */
    protected override getActiveParsers(frameCode: number): FrameParser[] {
      let activeParsers: FrameParser[] = [];

      // status byte parser
      const statusByteParsers = new PulseStatusByteParser();

      // Find the specific parser
      let dataParser: FrameParser;

      switch (frameCode) {
        case 0x10:
          dataParser = new Pulse0x10Parser();
          break;
        case 0x11:
          dataParser = new Pulse0x11Parser();
          break;
        case 0x12:
          dataParser = new Pulse0x12Parser();
          break;
        case 0x30:
          dataParser = new Pulse0x30Parser();
          break;
        case 0x46:
          dataParser = new Pulse0x46Parser();
          break;
        case 0x47:
          dataParser = new Pulse0x47Parser();
          break;
        case 0x48:
          dataParser = new Pulse0x48Parser();
          break;
        case 0x20:
          dataParser = new Generic0x20Parser();
          break;
        default:
          return activeParsers;
      }

      activeParsers = activeParsers.concat(statusByteParsers);
      activeParsers = activeParsers.concat(dataParser);

      // Return active parser
      return activeParsers;
    }
  }
}
