namespace codec {
  /**
   * Decoder class.
   *
   * Main class for decoding purposes.
   * Contains declaration of all required parsers and decode() method (API entry point).
   *
   * See below for explanations on parsers.
   */
  export class Decoder extends CommonDecoder {
    constructor() {
      super();
      this.deviceType = 'temp4';
    }

    /**
     * Get active parsers

     * @param frameCode frame code
     */
    protected override getActiveParsers(frameCode: number): FrameParser[] {
      let activeParsers: FrameParser[] = [];

      // status byte parser
      const statusByteParsers = new TempV4StatusByteParser();

      // Find the specific parser
      let dataParser: FrameParser;

      switch (frameCode) {
        case 0x10:
          dataParser = new TempV40x10Parser();
          break;
        case 0x30:
          dataParser = new TempV40x30Parser();
          break;
        case 0x57:
          dataParser = new TempV40x57Parser();
          break;
        case 0x58:
          dataParser = new TempV40x58Parser();
          break;
        case 0x20:
          dataParser = new Generic0x20Parser();
          break;
        case 0x2f:
          dataParser = new Generic0x2fParser();
          break;
        case 0x33:
          dataParser = new Generic0x33Parser();
          break;
        case 0x36:
          dataParser = new Generic0x36Parser();
          break;
        case 0x37:
          dataParser = new Generic0x37Parser();
          break;
        default:
          return activeParsers;
      }

      activeParsers = activeParsers.concat(statusByteParsers);
      activeParsers = activeParsers.concat(dataParser);

      // Return active parser
      return activeParsers;
    }
  }
}
